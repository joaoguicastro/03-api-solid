npm init -y
criar pasta src
criar o server.ts
npm i typescript @types/node tsx tsup -D
npx tsc --init 
trocar para o target ES2020
npm i fastify
criar o app.ts
criar o .gitignore - node_modules , build e .env
criar os scripts no package.json {
    "dev": "tsx watch src/server.ts",
    "build": "tsup src --out-dir build",
    "start": "node build/server.js"
}
criar o .npmrc - save-exact=true
instalar todas as dependencias dnv
npm i dotenv
npm i zod
npm i prisma -D
npx prisma init - inizializa a parte de conexao com banco de dados - necessario a extensao prisma 
npx prisma generate - criar de forma automatizada a tipagem - a tipagem e a automaçao do typescript para aparecer no codigo 
docker run --name { nome do docker } -e POSTGRESQL_USERNAME={ nome do usuario do banco } -e POSTGRESQL_PASSWORD= { senha do banco de dados } -e POSTGRESQL_DATABASE= { nome do DATABASE } -p { PORTA:PORTA } bitnami/postgresql
docker start { nome do docker }
docker stop { nome do docker }
docker rm { nome do docker } - deleta o docker
docker ps - mostra os conteiner rodando 
npx prisma migrate dev - ele vai fazer a migraçao doque estava no schema.prisma para o banco de dados
npx prisma studio - e algo visual para ver o banco de dados
criar o docker-compose.yml
colocar o seguinte codigo{
    version: '3'

    services:
    { NOME DO DOCKER }:
        image: bitnami/postgresql
        ports:
            - { PORTA:PORTA }
        environment:
            - POSTGRESQL_USERNAME={ NOME DO USUARIO DO BANCO }
            - POSTGRESQL_PASSWORD={ SENHA DO BANCO DE DADOS }
            - POSTGRESQL_DATABASE={ NOME DO DATABASE }
}
docker compose up -d - para subir a aplicaçao
docker compose down - vai deletar a aplicaçao
docker compose stop - vai para a aplicaçao
npm i bcryptjs - biblioteca para fazer hashing de senha ( importar onde tiver uma senha de um usuario para fazer o hashing dele)
npm i -D @types/bcryptjs - o typescript nao reconhece nativamente o bcryptjs entao para funcionar precisa desse codigo 
criar pasta use case para separar o core das rotas
criar register.ts
dentro do register.ts do use case o reply nao funciona entao para resolver tem que utilizar o throw new Error('email already exists')
vamos separa mais ainda o codigo do use case
criar pasta repositories 
criar prisma-repository-users.ts - vai ter varios metodos que vao ser as portas de entrada para qualquer operaçao que vou fazer no banco de dados